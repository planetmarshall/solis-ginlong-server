from functools import reduce

from solis_service.parse import parse_inverter_message
from solis_service.persist import to_influx_measurement

def test_parse_inverter_message():
    message = b"\xa5\xe9\x00\x10BO\x02\xc2\xe8\xd7\xf0\x01\x07\x05\xa7r\x01\x00\x12\x00\x00\x00'\x0cJ`\x01" \
              b"\x00\x9a\x01\x00\x00060E31208070023 p\x01X\x08\x08\x00\x14\x00\x01\x00\x00\x00\x00\x00\x10" \
              b"\x00\x00\x00\x00\x008\t\x8a\x13r\x01\x00\x00\xbe\x00\x00\x002\x00\x00\x00\x00\x00\x00\x00" \
              b"\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x12\x0e" \
              b"\x00\x00\xf8*\xe8\x03\xab\x01\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00 \x00\x05\x00\x00\x00" \
              b"\x00\x00\x00\x004\x00\x04\x00r\x01\x00\x00\x15\x00\x03\x00\x0c\x00\x0e\x00.\x00\x1e\x00\xe3" \
              b"\x00*\x00C\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
              b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
              b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
              b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x96\x15"

    data = parse_inverter_message(message)
    influx = to_influx_measurement("time", data)

    assert data["inverter_serial_number"] == "060E31208070023"

def checksum(buffer):
    return reduce(lambda lrc, x: (lrc + x) & 255, buffer)


def test_checksum():
    heartbeat = b'\xa5\n\x00\x10\x11"\x01\xc2\xe8\xd7\xf0\x02\x01\x8d\x9eL`\x00\x00\x00\x00\x99\x15'
    lrc = checksum(heartbeat[1:-2])

    assert lrc == 153